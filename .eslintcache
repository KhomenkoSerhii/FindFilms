[{"C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\pages\\MainPage\\index.js":"1","C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\components\\Card\\index.js":"2","C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\components\\Pagination\\index.js":"3","C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\App.js":"4","C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\constants\\index.js":"5","C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\api\\index.js":"6","C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\components\\Input\\index.js":"7","C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\index.js":"8"},{"size":2751,"mtime":1612534337512,"results":"9","hashOfConfig":"10"},{"size":1658,"mtime":1612455957240,"results":"11","hashOfConfig":"10"},{"size":4069,"mtime":1612539575003,"results":"12","hashOfConfig":"10"},{"size":193,"mtime":1612527723238,"results":"13","hashOfConfig":"10"},{"size":293,"mtime":1612287716964,"results":"14","hashOfConfig":"10"},{"size":522,"mtime":1612424758717,"results":"15","hashOfConfig":"10"},{"size":3521,"mtime":1612533276154,"results":"16","hashOfConfig":"10"},{"size":168,"mtime":1612170651512,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"1vtk699",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\pages\\MainPage\\index.js",["37"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { searchMoviesByInput, getGenres } from \"../../api\";\r\nimport CustomInput from \"../../components/Input/index\";\r\nimport MainPagination from \"../../components/Pagination/index\";\r\n\r\nconst useStyles = makeStyles({\r\n  App: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  mainComponent: {\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n});\r\n\r\nconst MainPageComponent = () => {\r\n  const classes = useStyles();\r\n\r\n  const [pageNum, setPageNum] = useState({ page_num: 1 });\r\n  const [data, setData] = useState([]);\r\n  const [genres, setGenresData] = useState([]);\r\n  const [stateGenre, setStateGenre] = useState(\"\");\r\n\r\n  const sortedFilms = data.results?.sort((a, b) => {\r\n    return new Date(b.release_date) - new Date(a.release_date);\r\n  });\r\n\r\n  const dataArray = [];\r\n  if (sortedFilms) {\r\n    const filteredGenres = [];\r\n\r\n    const getGenress = data.results?.map(({ title, genre_ids }) => {\r\n      const genreNames = genre_ids.map(\r\n        (gid) => genres.genres.find(({ id }) => id === gid).name\r\n      );\r\n      return {\r\n        title,\r\n        genres: genreNames,\r\n      };\r\n    });\r\n    filteredGenres.push(...getGenress);\r\n    sortedFilms.forEach((i) => {\r\n      const fGenres = filteredGenres.filter((m) => m.title === i.title);\r\n      dataArray.push({ ...i, genres: fGenres });\r\n    });\r\n  }\r\n\r\n  const nextPage = () => {\r\n    if (data) {\r\n      setPageNum({\r\n        page_num: (pageNum.page_num += 1),\r\n      });\r\n      searchMoviesByInput(stateGenre, pageNum.page_num).then((res) => {\r\n        setData(res);\r\n      });\r\n    }\r\n  };\r\n\r\n  const prevPage = () => {\r\n    if (data && pageNum.page_num !== 1) {\r\n      setPageNum({\r\n        page_num: (pageNum.page_num -= 1),\r\n      });\r\n      searchMoviesByInput(stateGenre, pageNum.page_num).then((res) => {\r\n        setData(res);\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPageNum({\r\n      page_num: (pageNum.page_num = 1),\r\n    });\r\n    getGenres().then((res) => setGenresData(res));\r\n    searchMoviesByInput(stateGenre, pageNum.page_num).then((res) => {\r\n      setData(res);\r\n    });\r\n  }, [stateGenre]);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  });\r\n\r\n  return (\r\n    <div className={classes.App}>\r\n      <CustomInput setStateGenre={setStateGenre} stateGenre={stateGenre} />\r\n      {sortedFilms && (\r\n        <div className={classes.mainComponent}>\r\n          <MainPagination\r\n            data={dataArray}\r\n            prevPage={prevPage}\r\n            nextPage={nextPage}\r\n            pageNumm={pageNum.page_num}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPageComponent;\r\n",["38","39"],"C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\components\\Card\\index.js",[],"C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\components\\Pagination\\index.js",["40","41","42"],"C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\App.js",[],"C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\constants\\index.js",[],"C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\api\\index.js",[],"C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\components\\Input\\index.js",["43","44"],"import React, { useEffect, useState } from \"react\";\r\nimport { MenuItem, TextField, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles({\r\n  customInput: {\r\n    width: 250,\r\n    margin: 10,\r\n    alignSelf: \"flex-end\",\r\n  },\r\n  filterSection: {\r\n    display: \"flex\",\r\n  },\r\n  closebtnSection: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    margin: \"0 5px\",\r\n  },\r\n  closeBtn: {\r\n    height: \"20px\",\r\n    width: \"20px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  closeBtnIcon: {\r\n    fontSize: \"15px\",\r\n  },\r\n});\r\n\r\nconst CustomInput = ({ setStateGenre, stateGenre }) => {\r\n  const classes = useStyles();\r\n\r\n  const [genres, setGenres] = useState([\r\n    { id: 28, name: \"Action\" },\r\n    { id: 12, name: \"Adventure\" },\r\n    { id: 16, name: \"Animation\" },\r\n    { id: 35, name: \"Comedy\" },\r\n    { id: 80, name: \"Crime\" },\r\n    { id: 99, name: \"Documentary\" },\r\n    { id: 18, name: \"Drama\" },\r\n    { id: 10751, name: \"Family\" },\r\n    { id: 14, name: \"Fantasy\" },\r\n    { id: 36, name: \"History\" },\r\n    { id: 27, name: \"Horror\" },\r\n  ]);\r\n\r\n  const [filmId, setFilmId] = useState([]);\r\n  const [names, setName] = useState([]);\r\n\r\n  const genresValue = names.map((i) => i.id);\r\n\r\n  const changeInputValue = (callback) => (e) => {\r\n    callback(e.target.value);\r\n  };\r\n\r\n  const addFilterToFilms = (id) => {\r\n    const newFilter = [...genresValue, { id }];\r\n    setFilmId(newFilter);\r\n  };\r\n\r\n  const removeFilteredGenre = (id) => {\r\n    const newNames = [...names];\r\n    newNames.splice(id, 1);\r\n    setName(newNames);\r\n  };\r\n\r\n  const filteredValues = () => {\r\n    filmId.forEach((t) => {\r\n      const res = genres.filter((i) => i.id === t.id);\r\n      setName([...names, ...res]);\r\n    });\r\n  };\r\n\r\n  const filteredFilmsGenre = () => {\r\n    filmId.forEach((t) => {\r\n      const res = genres.filter((i) => i.id !== t.id);\r\n      setGenres([...res]);\r\n    });\r\n  };\r\n\r\n  const sortedGenres = () => {\r\n    genres.sort((a, b) => {\r\n      return a.name.toUpperCase().localeCompare(b.name.toUpperCase());\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    filteredValues();\r\n    filteredFilmsGenre();\r\n  }, [filmId]);\r\n\r\n  useEffect(() => {\r\n    sortedGenres();\r\n    setStateGenre(genresValue);\r\n  }, [names]);\r\n\r\n  return (\r\n    <>\r\n      <TextField\r\n        className={classes.customInput}\r\n        id=\"standard-select-currency\"\r\n        select\r\n        value={stateGenre ? \"\" : stateGenre}\r\n        onChange={changeInputValue(addFilterToFilms)}\r\n        ext=\"Select genre\"\r\n      >\r\n        {genres.map((option) => (\r\n          <MenuItem key={option.id} value={option.id}>\r\n            {option.name}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n      <div className={classes.filterSection}>\r\n        {names.map((i, index) => (\r\n          <div className={classes.closebtnSection} key={i.id}>\r\n            <Typography component=\"p\">{i.name}</Typography>\r\n            <button\r\n              className={classes.closeBtn}\r\n              onClick={() => {\r\n                removeFilteredGenre(index);\r\n                setGenres([...genres, { ...i }]);\r\n              }}\r\n            >\r\n              <CloseIcon className={classes.closeBtnIcon} />\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nCustomInput.propTypes = {\r\n  setStateGenre: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CustomInput;\r\n","C:\\Users\\User\\Desktop\\FilmFind\\film\\src\\index.js",[],{"ruleId":"45","severity":1,"message":"46","line":81,"column":6,"nodeType":"47","endLine":81,"endColumn":18,"suggestions":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":48,"column":24,"nodeType":"55","messageId":"56","endLine":48,"endColumn":39},{"ruleId":"57","severity":1,"message":"58","line":110,"column":11,"nodeType":"59","endLine":115,"endColumn":12},{"ruleId":"57","severity":1,"message":"58","line":125,"column":11,"nodeType":"59","endLine":130,"endColumn":12},{"ruleId":"45","severity":1,"message":"60","line":92,"column":6,"nodeType":"47","endLine":92,"endColumn":14,"suggestions":"61"},{"ruleId":"45","severity":1,"message":"62","line":97,"column":6,"nodeType":"47","endLine":97,"endColumn":13,"suggestions":"63"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'pageNum'. Either include it or remove the dependency array. You can also do a functional update 'setPageNum(p => ...)' if you only need 'pageNum' in the 'setPageNum' call.","ArrayExpression",["64"],"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'setPostsPerPage' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'filteredFilmsGenre' and 'filteredValues'. Either include them or remove the dependency array.",["67"],"React Hook useEffect has missing dependencies: 'genresValue', 'setStateGenre', and 'sortedGenres'. Either include them or remove the dependency array. If 'setStateGenre' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["68"],{"desc":"69","fix":"70"},"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [pageNum, stateGenre]",{"range":"75","text":"76"},"Update the dependencies array to be: [filmId, filteredFilmsGenre, filteredValues]",{"range":"77","text":"78"},"Update the dependencies array to be: [genresValue, names, setStateGenre, sortedGenres]",{"range":"79","text":"80"},[2214,2226],"[pageNum, stateGenre]",[2276,2284],"[filmId, filteredFilmsGenre, filteredValues]",[2370,2377],"[genresValue, names, setStateGenre, sortedGenres]"]